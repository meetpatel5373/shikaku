<!DOCTYPE html>
<html>
  <head>
    <style>
      canvas {
        border: 1px solid #000;
      }
    </style>
  </head>
  <body>
    <canvas id="canvas" width="501" height="501"></canvas>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script>
      let squareId = 1;
      const grid = [];
      grid.squares = [];
      let boardId = null;

      for (let x = 0; x < 10; x++) grid[x] = [];

      $(document).ready(() => {
        createBoard(5, 5); // Start 10x10 board
      });

      async function createBoard(width, height) {
        const res = await fetch("/board", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ width, height }),
        });
        const data = await res.json();
        boardId = data.boardId;
        await fetchAndDrawRectangles();
      }

      async function fetchAndDrawRectangles() {
        const res = await fetch(`/board/${boardId}/rectangles`, {
          method: "POST",
        });
        const data = await res.json();

        grid.squares = [];
        for (let x = 0; x < 10; x++) grid[x] = [];

        data.rectangles.forEach((r, i) => {
          const square = {
            id: i + 1,
            textPos: { x: 0, y: 0 },
            pos: { x: r.x, y: r.y, width: r.width, height: r.height },
            rectId: r._id,
          };
          grid.squares.push(square);
          updateGridWithSquare(square);
        });

        drawCanvas();
      }

      function drawCanvas() {
        const canvas = $("#canvas");
        const context = canvas.get(0).getContext("2d");
        updateCanvas(context);
      }

      function updateCanvas(context) {
        context.clearRect(0, 0, 501, 501);
        context.fillStyle = "white";
        context.fillRect(0, 0, 500, 500);

        for (const square of grid.squares) {
          context.fillStyle = "#" + getColor(square.id);
          context.fillRect(
            3 + square.pos.x * 50,
            3 + square.pos.y * 50,
            square.pos.width * 50 - 6,
            square.pos.height * 50 - 6
          );
        }

        context.fillStyle = "black";
        context.textAlign = "center";
        for (const square of grid.squares) {
          const textX = square.pos.x + square.textPos.x;
          const textY = square.pos.y + square.textPos.y;
          const surface = square.pos.width * square.pos.height;
          context.fillText(surface, 25.5 + textX * 50, 25.5 + textY * 50);
        }

        for (let x = 0; x < 10; x++) {
          for (let y = 0; y < 10; y++) {
            context.strokeRect(0.5 + x * 50, 0.5 + y * 50, 50, 50);
          }
        }
      }

      function getColor(value) {
        const color = (value * 1777781) % 16777213;
        let hex = color.toString(16);
        while (hex.length < 6) hex += "0";
        return hex;
      }

      function getSquareAt(x, y) {
        return grid[x][y];
      }

      let dragContext = null;
      $("#canvas").on("mousedown", function (e) {
        const x = Math.floor(e.offsetX / 50);
        const y = Math.floor(e.offsetY / 50);
        const square = getSquareAt(x, y);
        console.log("square :>> ", square);
        if (!square) return;

        dragContext = {
          square: square,
          offsetX: x - square.pos.x,
          offsetY: y - square.pos.y,
        };

        removeFromGrid(square);
        $("#canvas").on("mousemove", drag);
      });

      $("#canvas").on("mouseup", async function (e) {
        if (!dragContext) return;

        const x = Math.floor(e.offsetX / 50) - dragContext.offsetX;
        const y = Math.floor(e.offsetY / 50) - dragContext.offsetY;

        dragContext.square.pos.x = Math.max(
          0,
          Math.min(10 - dragContext.square.pos.width, x)
        );
        dragContext.square.pos.y = Math.max(
          0,
          Math.min(10 - dragContext.square.pos.height, y)
        );
        grid.squares.push(dragContext.square);
        updateGridWithSquare(dragContext.square);

        // Call Snap API
        await fetch(`/board/${boardId}/snap`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            rectangleId: dragContext.square.rectId,
            x: dragContext.square.pos.x,
            y: dragContext.square.pos.y,
          }),
        });

        // Check for win
        const winRes = await fetch(`/board/${boardId}/check`);
        const winData = await winRes.json();
        if (winData.isWin) {
          alert("ðŸŽ‰ You Win!");
        }

        dragContext = null;
        $("#canvas").off("mousemove");
        updateCanvas($("#canvas")[0].getContext("2d"));
      });

      function drag(e) {
        const x = Math.floor(e.offsetX / 50) - dragContext.offsetX;
        const y = Math.floor(e.offsetY / 50) - dragContext.offsetY;
        const square = dragContext.square;
        square.pos.x = Math.max(0, Math.min(10 - square.pos.width, x));
        square.pos.y = Math.max(0, Math.min(10 - square.pos.height, y));
        updateCanvas($("#canvas")[0].getContext("2d"));
      }

      function updateGridWithSquare(square) {
        for (let x = 0; x < square.pos.width; x++) {
          for (let y = 0; y < square.pos.height; y++) {
            grid[square.pos.x + x][square.pos.y + y] = square;
          }
        }
      }

      function removeFromGrid(square) {
        for (let x = 0; x < square.pos.width; x++) {
          for (let y = 0; y < square.pos.height; y++) {
            grid[square.pos.x + x][square.pos.y + y] = null;
          }
        }
        const idx = grid.squares.indexOf(square);
        if (idx !== -1) grid.squares.splice(idx, 1);
      }
    </script>
  </body>
</html>
